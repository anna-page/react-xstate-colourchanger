{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","cancel","boolgrammar","yes","no","dmMenu","initial","states","init","on","CLICK","welcome","RECOGNISED","target","prompt","entry","ENDSPEECH","ask","invoke_rasa","invoke","id","src","context","event","nluRequest","recResult","onDone","actions","assign","intentResult","data","intent","name","onError","console","log","answer","RASA_DONE","cond","who","nomatch","allday","confirm","confirmallday","confirmtime","meetingbooked","todo","timer","fetch","Request","proxyurl","method","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.f34f1fb5.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\nimport { invoke } from \"xstate/lib/actionTypes\";\n// import { dmMachine } from \"./dmAppointment-old\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, cancel?: string,} } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Jack\": {person: \"Jack Jackson\"},\n    \"Anna\": {person: \"Anna\"},\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"at 1 a.m.\": { time: \"1:00\" },\n    \"at 2 a.m.\": { time: \"2:00\" },\n    \"at 3 a.m.\": { time: \"3:00\" },\n    \"at 4 a.m.\": { time: \"4:00\" },\n    \"at 5 a.m.\": { time: \"5:00\" },\n    \"at 6 a.m.\": { time: \"6:00\" },\n    \"at 7 a.m.\": { time: \"7:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 1\": { time: \"13:00\" },\n    \"at 2\": { time: \"14:00\" },\n    \"at 3\": { time: \"15:00\" },\n    \"at 4\": { time: \"16:00\" },\n    \"at 5\": { time: \"17:00\" },\n    \"at 6\": { time: \"18:00\" },\n    \"at 7\": { time: \"19:00\" },\n    \"at 8 p.m.\": { time: \"20:00\" },\n    \"at 9 p.m.\": { time: \"21:00\" },\n    \"at 10 p.m.\": { time: \"22:00\" },\n    \"at 11 p.m.\": { time: \"23:00\" },\n    \"at midnight\": {time: \"00:00\"},\n    \"quit\": {cancel: \"cancel\"},\n    \"cancel\": {cancel: \"cancel\"},\n    \"nevermind\": {cancel: \"cancel\"}\n}\n\nconst boolgrammar: {[index: string]: {yes?: boolean, no?:boolean}} = {\n    \"yes\": {yes: true },\n    \"yep\": {yes: true },\n    \"of course\": {yes: true },\n    \"sure\": {yes: true },\n    \"no\": {no: false },\n    \"no way\": {no: false },\n    \"nope\": {no: false },\n}\n\nexport const dmMenu: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: { \n                    target: 'invoke_rasa',\n                }\n            },\n            states: {\n                prompt: { \n                    entry: say(\"What do you want to do?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n            }\n        },\n        invoke_rasa: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.recResult),\n                onDone: {\n                    target: 'answer',\n                    actions: [\n                        assign((context, event) => { return { intentResult: event.data.intent.name } }),\n                        // (context:SDSContext, event:any) => console.log('<< Intent: ' + context.intentResult),\n                        send('RASA_DONE')\n                    ],\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context,event) => console.log(event.data),\n                },\n            }\n        },\n        answer: {\n            on: { \n                RASA_DONE: [{\n                    cond: (context: { intentResult: string; }) => \"add_todo_item\" == context.intentResult,\n                    actions: (context:SDSContext) => console.log('<< TODO: ' + context.intentResult),\n                    target: 'todo',\n                },\n                {\n                    cond: (context: { intentResult: string; }) => \"make_appointment\" == context.intentResult,\n                    actions: (context:SDSContext) => console.log('<< APP: ' + context.intentResult),\n                    target: 'who',\n                },\n                {\n                    cond: (context: { intentResult: string; }) => \"set_timer\" == context.intentResult,\n                    actions: (context:SDSContext) => console.log('<< TIMER: ' + context.intentResult),\n                    target: 'timer',\n                }]\n            },\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                {\n                    cond: (context) => \"cancel\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { cancel: grammar[context.recResult].cancel } }),\n                    target: \"init\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"allday\"\n\n                },\n                {\n                    cond: (context) => \"cancel\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { cancel: grammar[context.recResult].cancel } }),\n                    target: \"init\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        allday: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: boolgrammar[context.recResult].yes } }),\n                    target: \"confirmallday\",\n\n                },\n                {\n                    cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: boolgrammar[context.recResult].no } }),\n                    target: \"time\",\n                },\n                {\n                    cond: (context) => \"cancel\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { cancel: grammar[context.recResult].cancel } }),\n                    target: \"init\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. Is your meeting all day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        confirmallday: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: boolgrammar[context.recResult].yes } }),\n                    target: \"meetingbooked\",\n\n                },\n                {\n                    cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: boolgrammar[context.recResult].no } }),\n                    target: \"who\",\n                },\n                {\n                    cond: (context) => \"cancel\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { cancel: grammar[context.recResult].cancel } }),\n                    target: \"init\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirmtime\"\n\n                },\n                {\n                    cond: (context) => \"cancel\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { cancel: grammar[context.recResult].cancel } }),\n                    target: \"init\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. At what time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        confirmtime: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: boolgrammar[context.recResult].yes } }),\n                    target: \"meetingbooked\",\n\n                },\n                {\n                    cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: boolgrammar[context.recResult].no } }),\n                    target: \"who\",\n                },\n                {\n                    cond: (context) => \"cancel\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { cancel: grammar[context.recResult].cancel } }),\n                    target: \"init\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        meetingbooked: {\n            initial: \"prompt\",\n            on: { \n                ENDSPEECH: \"init\" ,\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    })),\n                },\n            }\n        },\n        todo: {\n            initial: 'prompt',\n            states: {\n                prompt: { entry: say(\"Okay, let's create a new to do item.\")}\n            },\n            on: { ENDSPEECH: \"init\" }\n        },\n        timer: {\n            initial: 'prompt',\n            states: {\n                prompt: { entry: say(\"Okay, let's set a timer.\")}\n            },\n            on: { ENDSPEECH: \"init\" }\n        },\n    }\n})\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-heroku.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        // headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n// import { dmMachine } from \"./dmAppointment-old\";\nimport { dmMenu } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMenu\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        progress: {\n                        },\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-heroku.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);"],"sourceRoot":""}