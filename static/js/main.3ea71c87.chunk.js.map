{"version":3,"sources":["lab4_dmAppointments.ts","index.tsx"],"names":["send","actions","cancel","say","text","_context","type","value","listen","promptAndAsk","prompt","secondPrompt","thirdPrompt","fourthPrompt","initial","states","promptFour","entry","on","ENDSPEECH","promptThree","promptTwo","ask","delay","id","MAXSPEECH","cond","context","event","counter","target","getHelp","help","grammar","person","day","time","boolgrammar","yes","no","dmMenu","init","CLICK","welcome","RECOGNISED","recResult","invoke_rasa","invoke","src","nluRequest","onDone","assign","intentResult","data","intent","name","onError","console","log","answer","RASA_DONE","makeAppointment","hist","history","who","nomatch","begin","allday","confirm","confirmallday","confirmtime","meetingbooked","stop","always","todo","timer","maxspeech","fetch","Request","proxyurl","method","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","count","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"4QACOA,EAAgBC,IAAhBD,KAAME,EAAUD,IAAVC,OAMb,SAASC,EAAIC,GACT,OAAOJ,GAAMK,IAAD,CAA6BC,KAAM,QAASC,MAAOH,MAGnE,SAASI,IACL,OAAOR,EAAK,UAGhB,SAASS,EAAaC,EAAgBC,EAAsBC,EAAqBC,GAC7E,MAAQ,CACJC,QAAS,SACTC,OAAQ,CACJC,WAAY,CACRC,MAAOd,EAAIU,GACXK,GAAI,CAAEC,UAAW,QAErBC,YAAa,CACTH,MAAOd,EAAIS,GACXM,GAAI,CAAEC,UAAW,QAErBE,UAAW,CACPJ,MAAOd,EAAIQ,GACXO,GAAI,CAAEC,UAAW,QAErBT,OAAQ,CACJO,MAAOd,EAAIO,GACXQ,GAAI,CAAEC,UAAW,QAErBG,IAAK,CACDL,MAAO,CAACjB,EAAK,UACTA,EAAK,YAAa,CACduB,MAAO,IACPC,GAAI,WAGZN,GAAI,CACAO,UAAW,CACP,CACIC,KAAM,CAACC,EAASC,IAA8B,IAApBD,EAAQE,QAClCC,OAAQ,aAEZ,CACIJ,KAAM,CAACC,EAASC,IAA8B,IAApBD,EAAQE,QAClCC,OAAQ,eAEZ,CACIJ,KAAM,CAACC,EAASC,IAA8B,IAApBD,EAAQE,QAClCC,OAAQ,cAEZ,CACIJ,KAAM,CAACC,EAASC,IAAUD,EAAQE,QAAU,EAC5CC,OAAQ,sBASpC,SAASC,EAAQrB,GACb,MAAQ,CACJI,QAAS,OACTC,OAAQ,CACJiB,KAAM,CACFf,MAAOd,EAAIO,GACXQ,GAAI,CAACC,UAAW,QAEpBG,IAAK,CACDL,MAAO,CACHjB,EAAK,UACLA,EAAK,YAAa,CACduB,MAAO,UAQ/B,MAAMU,EAAkG,CACpG,KAAQ,CAAEC,OAAQ,kBAClB,KAAQ,CAACA,OAAQ,gBACjB,KAAQ,CAACA,OAAQ,QACjB,YAAa,CAAEC,IAAK,UACpB,OAAU,CAAEA,IAAK,UACjB,aAAc,CAAEA,IAAK,WACrB,QAAW,CAAEA,IAAK,WAClB,eAAgB,CAAEA,IAAK,aACvB,UAAa,CAAEA,IAAK,aACpB,cAAe,CAAEA,IAAK,YACtB,SAAY,CAAEA,IAAK,YACnB,YAAa,CAAEA,IAAK,UACpB,OAAU,CAAEA,IAAK,UACjB,cAAe,CAAEA,IAAK,YACtB,SAAY,CAAEA,IAAK,YACnB,YAAa,CAAEA,IAAK,UACpB,OAAU,CAAEA,IAAK,UACjB,YAAa,CAAEC,KAAM,QACrB,YAAa,CAAEA,KAAM,QACrB,YAAa,CAAEA,KAAM,QACrB,YAAa,CAAEA,KAAM,QACrB,YAAa,CAAEA,KAAM,QACrB,YAAa,CAAEA,KAAM,QACrB,YAAa,CAAEA,KAAM,QACrB,OAAQ,CAAEA,KAAM,QAChB,OAAQ,CAAEA,KAAM,QAChB,QAAS,CAAEA,KAAM,SACjB,QAAS,CAAEA,KAAM,SACjB,QAAS,CAAEA,KAAM,SACjB,OAAQ,CAAEA,KAAM,SAChB,OAAQ,CAAEA,KAAM,SAChB,OAAQ,CAAEA,KAAM,SAChB,OAAQ,CAAEA,KAAM,SAChB,OAAQ,CAAEA,KAAM,SAChB,OAAQ,CAAEA,KAAM,SAChB,OAAQ,CAAEA,KAAM,SAChB,YAAa,CAAEA,KAAM,SACrB,YAAa,CAAEA,KAAM,SACrB,aAAc,CAAEA,KAAM,SACtB,aAAc,CAAEA,KAAM,SACtB,cAAe,CAACA,KAAM,SACtB,KAAQ,CAAClC,OAAQ,UACjB,OAAU,CAACA,OAAQ,UACnB,UAAa,CAACA,OAAQ,WAGpBmC,EAA+D,CACjE,IAAO,CAACC,KAAK,GACb,IAAO,CAACA,KAAK,GACb,YAAa,CAACA,KAAK,GACnB,KAAQ,CAACA,KAAK,GACd,GAAM,CAACC,IAAI,GACX,SAAU,CAACA,IAAI,GACf,KAAQ,CAACA,IAAI,IAGJC,EAAoD,CAC7D1B,QAAS,OACTC,OAAQ,CACJ0B,KAAM,CACFvB,GAAI,CACAwB,MAAO,YAGfC,QAAS,CACL7B,QAAS,SACTI,GAAI,CACA0B,WAAY,CACR,CACId,OAAQ,OACRJ,KAAOC,GAAgC,SAAtBA,EAAQkB,WAE7B,CACIf,OAAQ,QACRJ,KAAOC,GAAgC,SAAtBA,EAAQkB,WAE7B,CACIf,OAAQ,iBAIpBf,OAAQ,CACJL,OAAO,eACAD,EAAa,0BAA2B,8BAA+B,aAAc,+CAE5FuB,KAAK,eACED,EAAQ,gFAIvBe,YAAa,CACTC,OAAQ,CACJvB,GAAI,OACJwB,IAAK,CAACrB,EAASC,IAAUqB,EAAWtB,EAAQkB,WAC5CK,OAAQ,CACJpB,OAAQ,SACR7B,QAAS,CACLkD,aAAO,CAACxB,EAASC,KAAmB,CAAEwB,aAAcxB,EAAMyB,KAAKC,OAAOC,SACtEvD,EAAK,eAGbwD,QAAS,CACL1B,OAAQ,UACR7B,QAAS,CAAC0B,EAAQC,IAAU6B,QAAQC,IAAI9B,EAAMyB,SAI1DM,OAAQ,CACJzC,GAAI,CACA0C,UAAW,CAAC,CACRlC,KAAOC,GAAuC,iBAAmBA,EAAQyB,aACzEnD,QAAU0B,GAAuB8B,QAAQC,IAAI,YAAc/B,EAAQyB,cACnEtB,OAAQ,QAEZ,CACIJ,KAAOC,GAAuC,oBAAsBA,EAAQyB,aAC5EnD,QAAU0B,GAAuB8B,QAAQC,IAAI,WAAa/B,EAAQyB,cAClEtB,OAAQ,mBAEZ,CACIJ,KAAOC,GAAuC,aAAeA,EAAQyB,aACrEnD,QAAU0B,GAAuB8B,QAAQC,IAAI,aAAe/B,EAAQyB,cACpEtB,OAAQ,YAIpB+B,gBAAgB,CACZ/C,QAAS,MACTI,GAAI,CACA0B,WAAY,CACRd,OAAQ,OACRJ,KAAOC,GAAgC,SAArBA,EAAQkB,WAE9BpB,UAAW,CACP,CACIC,KAAM,CAACC,EAASC,IAAUD,EAAQE,QAAU,EAC5CC,OAAQ,aAEZ,CACIJ,KAAM,CAACC,EAASC,IAAUD,EAAQE,QAAU,EAC5CC,OAAQ,mBAIpBf,OAAQ,CACJ+C,KAAM,CAACxD,KAAM,UAAWyD,QAAS,QACjCC,IAAK,CACDlD,QAAS,SACTI,GAAI,CACA0B,WAAY,CACR,CACIlB,KAAOC,GAAY,WAAaM,EAAQN,EAAQkB,YAAc,IAC9Df,OAAQ,MACR7B,QAAS,CACLkD,aAAQxB,IAAqB,CAAEO,OAAQD,EAAQN,EAAQkB,WAAWX,aAG1E,CACIJ,OAAQ,QACRJ,KAAOC,GAAgC,SAAtBA,EAAQkB,WAE7B,CACInB,KAAOC,GAAiC,SAAtBA,EAAQkB,UAC1Bf,OAAQ,cAIpBf,OAAQ,CACJL,OAAO,eACAD,EACC,4BACA,+CACA,4BACA,+CAGRuB,KAAK,eACED,EAAQ,+FAEfkC,QAAS,CACLhD,MAAOd,EAAI,2BACXe,GAAI,CAAEC,UAAW,aAI7BgB,IAAK,CACDrB,QAAS,QACTI,GAAI,CACA0B,WAAY,CAAC,CACTlB,KAAOC,GAAY,QAAUM,EAAQN,EAAQkB,YAAc,IAC3D5C,QAAS,CAACC,EAAO,SAAUiD,aAAQxB,IAAqB,CAAEQ,IAAKF,EAAQN,EAAQkB,WAAWV,SAC1FL,OAAQ,UAGZ,CACIA,OAAQ,QACRJ,KAAOC,GAAgC,SAAtBA,EAAQkB,WAE7B,CAAInB,KAAOC,GAAiC,SAAtBA,EAAQkB,UAC1Bf,OAAQ,cAEhBf,OAAQ,CACJmD,MAAO,CACHjD,MAAOjB,GAAM2B,IAAD,CACRrB,KAAM,QACNC,MAAM,OAAD,OAASoB,EAAQO,OAAjB,SAEThB,GAAI,CAAEC,UAAW,WAErBT,OAAO,eACAD,EACC,gCACA,gCACA,8BACA,oCAGRuB,KAAK,eACED,EAAQ,4CAEfkC,QAAS,CACLhD,MAAOd,EAAI,6BACXe,GAAI,CAAEC,UAAW,aAI7BgD,OAAQ,CACJrD,QAAS,QACTI,GAAI,CACA0B,WAAY,CAAC,CACTlB,KAAOC,GAAY,QAAUU,EAAYV,EAAQkB,YAAc,IAC/D5C,QAAS,CAACC,EAAO,SAAUiD,aAAQxB,IAAqB,CAAEyC,QAAS/B,EAAYV,EAAQkB,WAAWP,SAClGR,OAAQ,iBAGZ,CACIJ,KAAOC,GAAY,OAASU,EAAYV,EAAQkB,YAAc,IAC9D5C,QAAS,CAACC,EAAO,SAAUiD,aAAQxB,IAAqB,CAAEyC,QAAS/B,EAAYV,EAAQkB,WAAWN,QAClGT,OAAQ,QAEZ,CACIA,OAAQ,QACRJ,KAAOC,GAAgC,SAAtBA,EAAQkB,WAE7B,CAAInB,KAAOC,GAAiC,SAAtBA,EAAQkB,UAC1Bf,OAAQ,cAEhBf,OAAQ,CACJmD,MAAO,CACHjD,MAAOjB,GAAM2B,IAAD,CACRrB,KAAM,QACNC,MAAM,OAAD,OAASoB,EAAQQ,IAAjB,SAETjB,GAAI,CAAEC,UAAW,WAErBa,KAAK,eACED,EAAQ,2BAEfrB,OAAO,eACAD,EACC,2BACA,eACA,wBACA,oCAGRa,IAAK,CACDL,MAAOT,KAEXyD,QAAS,CACLhD,MAAOd,EAAI,6BACXe,GAAI,CAAEC,UAAW,aAI7BkD,cAAe,CACXvD,QAAS,SACTI,GAAI,CACA0B,WAAY,CAAC,CACTlB,KAAOC,GAAY,QAAUU,EAAYV,EAAQkB,YAAc,IAC/D5C,QAAS,CAACC,EAAO,SAAUiD,aAAQxB,IAAqB,CAAEyC,QAAS/B,EAAYV,EAAQkB,WAAWP,SAClGR,OAAQ,iBAGZ,CACIJ,KAAOC,GAAY,OAASU,EAAYV,EAAQkB,YAAc,IAC9D5C,QAAS,CAACC,EAAO,SAAUiD,aAAQxB,IAAqB,CAAEyC,QAAS/B,EAAYV,EAAQkB,WAAWN,QAClGT,OAAQ,OAEZ,CACIJ,KAAOC,GAAY,WAAaM,EAAQN,EAAQkB,YAAc,IAC9D5C,QAASkD,aAAQxB,IAAqB,CAAEzB,OAAQ+B,EAAQN,EAAQkB,WAAW3C,WAC3E4B,OAAQ,iBAEZ,CACIA,OAAQ,QACRJ,KAAOC,GAAgC,SAAtBA,EAAQkB,WAE7B,CAAInB,KAAOC,GAAiC,SAAtBA,EAAQkB,UAC1Bf,OAAQ,cAGhBf,OAAQ,CACJL,OAAQ,CACJO,MAAOjB,GAAM2B,IAAD,CACRrB,KAAM,QACNC,MAAM,gDAAD,OAAkDoB,EAAQO,OAA1D,eAAuEP,EAAQQ,IAA/E,2BAETjB,GAAI,CAAEC,UAAW,QAErBa,KAAK,eACED,EAAQ,yBAEfT,IAAK,CACDL,MAAO,CAACT,IACRR,EAAK,YAAa,CAAEuB,MAAO,IACPC,GAAI,YAE5ByC,QAAS,CACLhD,MAAOd,EAAI,6BACXe,GAAI,CAAEC,UAAW,aAI7BiB,KAAM,CACFtB,QAAS,QACTI,GAAI,CACA0B,WAAY,CAAC,CACTlB,KAAOC,GAAY,SAAWM,EAAQN,EAAQkB,YAAc,IAC5D5C,QAAS,CAACC,EAAO,SAAUiD,aAAQxB,IAAqB,CAAES,KAAMH,EAAQN,EAAQkB,WAAWT,UAC3FN,OAAQ,eAGZ,CACIA,OAAQ,QACRJ,KAAOC,GAAgC,SAAtBA,EAAQkB,WAE7B,CAAInB,KAAOC,GAAiC,SAAtBA,EAAQkB,UAC1Bf,OAAQ,cAEhBf,OAAQ,CACJmD,MAAM,CACFjD,MAAOjB,GAAM2B,IAAD,CACRrB,KAAM,QACNC,MAAM,UAEVW,GAAI,CAAEC,UAAW,WAErBT,OAAO,eACAD,EACC,gCACA,uBACA,4BACA,yDAGRuB,KAAK,eACED,EACC,2CAGRT,IAAK,CACDL,MAAOT,KAEXyD,QAAS,CACLhD,MAAOd,EAAI,6BACXe,GAAI,CAAEC,UAAW,aAI7BmD,YAAa,CACTxD,QAAS,SACTI,GAAI,CACA0B,WAAY,CACR,CACIlB,KAAOC,GAAY,QAAUU,EAAYV,EAAQkB,YAAc,IAC/D5C,QAAS,CAACC,EAAO,SAAUiD,aAAQxB,IAAqB,CAAEyC,QAAS/B,EAAYV,EAAQkB,WAAWP,SAClGR,OAAQ,iBAEZ,CACIJ,KAAOC,GAAY,OAASU,EAAYV,EAAQkB,YAAc,IAC9D5C,QAAS,CAACC,EAAO,SAAUiD,aAAQxB,IAAqB,CAAEyC,QAAS/B,EAAYV,EAAQkB,WAAWN,QAClGT,OAAQ,OAEZ,CACIJ,KAAOC,GAAgC,SAAtBA,EAAQkB,UACzBf,OAAQ,SAEZ,CAAIJ,KAAOC,GAAiC,SAAtBA,EAAQkB,UAC1Bf,OAAQ,cAIpBf,OAAQ,CACJL,OAAQ,CACJO,MAAOjB,GAAM2B,IAAD,CACRrB,KAAM,QACNC,MAAM,gDAAD,OAAkDoB,EAAQO,OAA1D,eAAuEP,EAAQQ,IAA/E,eAAyFR,EAAQS,KAAjG,SAETlB,GAAI,CAAEC,UAAW,QAErBa,KAAK,eACED,EAAQ,yBAEfT,IAAK,CACDL,MAAO,CAACT,IAAUR,EAAK,YAAa,CAACuB,MAAO,IACRC,GAAI,YAE5CyC,QAAS,CACLhD,MAAOd,EAAI,6BACXe,GAAI,CAAEC,UAAW,aAI7BoD,cAAe,CACXzD,QAAS,SACTI,GAAI,CACAC,UAAW,iBAEfJ,OAAQ,CACJL,OAAQ,CACJO,MAAOjB,GAAM2B,IAAD,CACRrB,KAAM,QACNC,MAAM,8CAO9BiE,KAAM,CACFvD,MAAOd,EAAI,uBACXsE,OAAQ,QAEZC,KAAM,CACF5D,QAAS,SACTC,OAAQ,CACJL,OAAQ,CAAEO,MAAOd,EAAI,0CAEzBe,GAAI,CAAEC,UAAW,SAErBwD,MAAO,CACH7D,QAAS,SACTC,OAAQ,CACJL,OAAQ,CAAEO,MAAOd,EAAI,8BAEzBe,GAAI,CAAEC,UAAW,SAErByD,UAAW,CACP3D,MAAOd,EAAI,8BACXe,GAAI,CAAE,UAAa,2BASzB+B,EAAc7C,GAChByE,MAAM,IAAIC,QAAQC,wFAAoB,CAClCC,OAAQ,OAERC,KAAK,aAAD,OAAe7E,EAAf,SAEH8E,MAAK7B,GAAQA,EAAK8B,S,0BCpiBpBnF,EAAgBC,IAAhBD,KAAME,EAAUD,IAAVC,OAObkF,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAWZ,MAAMC,EAAUC,YAAmC,CAC/ChE,GAAI,OACJlB,KAAM,WACNS,OAAQ,CACJ0E,GAAG,eACIjD,GAEPkD,OAAQ,CACJ5E,QAAS,OACTC,OAAQ,CACJ4E,KAAM,CACFzE,GAAI,CACA0E,OAAQ,cACRC,MAAO,CACH/D,OAAQ,WACR7B,QAASkD,aAAO,CAAC9C,EAAUuB,KAAmB,CAAEkE,UAAWlE,EAAMrB,aAI7EwF,YAAa,CACTjF,QAAS,WACTG,MAAO,WACP+E,KAAM,UACN9E,GAAI,CACA+E,UAAW,CACPhG,QAAS,CAAC,eACNkD,aAAO,CAAC9C,EAAUuB,KAAmB,CAAEiB,UAAWjB,EAAMrB,WAC5DuB,OAAQ,UAEZc,WAAY,CACRd,OAAQ,OACR7B,QAAS,CACLkD,aAAQxB,IACG,CAACE,QAASF,EAAQE,QAAU,MAEvC3B,EAAO,WAGfuB,UAAW,CACPK,OAAQ,OACR7B,QAASkD,aAAQxB,GACTA,EAAQE,QACD,CAACA,QAASF,EAAQE,QAAU,GAE5B,CAACA,QAASqE,OAMjCnF,OAAQ,CACJoF,SAAU,GAEVC,MAAO,CACHnF,MAAOjB,EAAK,iBAIxBqG,SAAU,CACNpF,MAAO,WACPC,GAAI,CACAC,UAAW,aAO/B,CACIlB,QAAS,CACLqG,aAAe3E,IAEX8B,QAAQC,IAAI,WAAa/B,EAAQkB,YAErC0D,KAAM,KACF9C,QAAQC,IAAI,SAEhB8C,UAAY7E,IAER8B,QAAQC,IAAI,kBAAoB/B,EAAQ8E,QAAQnD,OAAOC,UAUjEmD,EAAkBC,IACpB,QAAQ,GACJ,KAAKA,EAAMC,MAAMC,QAAQ,CAAEnB,OAAQ,gBAC/B,OACI,gDAAQpF,KAAK,SAASwG,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,uBAA4BL,GADpD,+BAKR,KAAKA,EAAMC,MAAMC,QAAQ,CAAEnB,OAAQ,aAC/B,OACI,gDAAQpF,KAAK,SAASwG,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,0BAA+BL,GADvD,8BAKR,QACI,OACI,gDAAQrG,KAAK,SAASwG,UAAU,iBAAoBH,GAApD,mCAOhB,SAASM,IAAO,MAAD,EACyBC,6BAAmB,CACnDC,MAAO,KACHnH,EAAK,gBAFLoH,EADG,EACHA,MAAOlH,EADJ,EACIA,OADJ,KACYmG,SAKagB,+BAAqB,CACrDC,SAAWC,IACPvH,EAAK,CAAEM,KAAM,YAAaC,MAAOgH,QAFjC/G,EANG,EAMHA,OAAmBgE,GANhB,EAMKgD,UANL,EAMgBhD,MANhB,EAWsBiD,YAAWlC,EAAS,CACjDmC,UAAU,EACVzH,QAAS,CACL0H,SAAUC,aAAS,KACfnE,QAAQC,IAAI,qCACZlD,EAAO,CACHqH,gBAAgB,EAChBC,YAAY,OAGpBC,QAASH,aAAS,KACdnE,QAAQC,IAAI,wBACZc,OAEJwD,aAAcJ,aAAUjG,IACpB8B,QAAQC,IAAI,iBACZuE,SAAShD,KAAK8B,MAAMmB,WAAavG,EAAQkB,aAE7CsF,SAAUP,aAAS,CAACjG,EAASyG,KACzB3E,QAAQC,IAAI,eACZ0D,EAAM,CAAEhH,KAAMuB,EAAQmE,eAE1BuC,UAAWT,aAAS,CAACjG,EAASyG,KAC1B3E,QAAQC,IAAI,eACZxD,UAnCD,mBAWJoI,EAXI,KAWKtI,EAXL,UA6CX,OACI,qBAAK8G,UAAU,MAAf,SACI,cAACJ,EAAD,CAAgBE,MAAO0B,EAASC,QAAS,IAAMvI,EAAK,aAShE,MAUMwI,EAAcP,SAASQ,eAAe,QAC5CC,SACI,cAACzB,EAAD,IACAuB,K","file":"static/js/main.3ea71c87.chunk.js","sourcesContent":["import { MachineConfig, Action, assign, actions} from \"xstate\";\nconst {send, cancel} = actions\nimport {invoke } from \"xstate/lib/actionTypes\";\n// import { dmMachine } from \"./dmAppointment-old\";\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string, secondPrompt: string, thirdPrompt: string, fourthPrompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            promptFour: {\n                entry: say(fourthPrompt),\n                on: { ENDSPEECH: 'ask' },\n            },\n            promptThree: {\n                entry: say(thirdPrompt),\n                on: { ENDSPEECH: 'ask' },\n            },\n            promptTwo: {\n                entry: say(secondPrompt),\n                on: { ENDSPEECH: 'ask' },\n            },\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' },\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                    send('MAXSPEECH', {\n                        delay: 5000,\n                        id: 'maxsp',\n                    })\n                ],\n                on: {\n                    MAXSPEECH: [\n                        {\n                            cond: (context, event) => context.counter === 0,\n                            target: 'promptTwo',\n                        },\n                        {\n                            cond: (context, event) => context.counter === 1,\n                            target: 'promptThree',\n                        },\n                        {\n                            cond: (context, event) => context.counter === 2,\n                            target: 'promptFour',\n                        },\n                        {\n                            cond: (context, event) => context.counter > 2,\n                            target: \"#root.dm.init\",\n                        }\n                    ]\n                },\n            },\n        }\n    })\n}\n\nfunction getHelp(prompt: string):  MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'help',\n        states: {\n            help: {\n                entry: say(prompt),\n                on: {ENDSPEECH: 'ask'},\n            },\n            ask: {\n                entry: [\n                    send('LISTEN'), \n                    send('MAXSPEECH', {\n                        delay: 5000,\n                    })\n                ],\n            }\n        }\n    })\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, cancel?: string,} } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Jack\": {person: \"Jack Jackson\"},\n    \"Anna\": {person: \"Anna\"},\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"at 1 a.m.\": { time: \"1:00\" },\n    \"at 2 a.m.\": { time: \"2:00\" },\n    \"at 3 a.m.\": { time: \"3:00\" },\n    \"at 4 a.m.\": { time: \"4:00\" },\n    \"at 5 a.m.\": { time: \"5:00\" },\n    \"at 6 a.m.\": { time: \"6:00\" },\n    \"at 7 a.m.\": { time: \"7:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 1\": { time: \"13:00\" },\n    \"at 2\": { time: \"14:00\" },\n    \"at 3\": { time: \"15:00\" },\n    \"at 4\": { time: \"16:00\" },\n    \"at 5\": { time: \"17:00\" },\n    \"at 6\": { time: \"18:00\" },\n    \"at 7\": { time: \"19:00\" },\n    \"at 8 p.m.\": { time: \"20:00\" },\n    \"at 9 p.m.\": { time: \"21:00\" },\n    \"at 10 p.m.\": { time: \"22:00\" },\n    \"at 11 p.m.\": { time: \"23:00\" },\n    \"at midnight\": {time: \"00:00\"},\n    \"quit\": {cancel: \"cancel\"},\n    \"cancel\": {cancel: \"cancel\"},\n    \"nevermind\": {cancel: \"cancel\"}\n}\n\nconst boolgrammar: {[index: string]: {yes?: boolean, no?:boolean}} = {\n    \"yes\": {yes: true },\n    \"yep\": {yes: true },\n    \"of course\": {yes: true },\n    \"sure\": {yes: true },\n    \"no\": {no: false },\n    \"no way\": {no: false },\n    \"nope\": {no: false },\n}\n\nexport const dmMenu: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [\n                    {\n                        target: 'stop',\n                        cond: (context)=>context.recResult === 'stop'\n                    },\n                    {\n                        target: '.help',\n                        cond: (context)=>context.recResult === 'help'\n                    },\n                    { \n                        target: 'invoke_rasa',\n                    }\n                ],\n            },\n            states: {\n                prompt:{\n                    ...promptAndAsk(\"What do you want to do?\", \"Tell me what you want to do\", \"Talk to me\", \"Why won't you tell me what you want to do?\"),\n                },\n                help:{\n                    ...getHelp(\"Choose either make an appointment, set a timer, or add item to to do list\")\n                }\n            }\n        },\n        invoke_rasa: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.recResult),\n                onDone: {\n                    target: 'answer',\n                    actions: [\n                        assign((context, event) => { return { intentResult: event.data.intent.name } }),\n                        send('RASA_DONE'),\n                    ],\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context,event) => console.log(event.data),\n                },\n            }\n        },\n        answer: {\n            on: { \n                RASA_DONE: [{\n                    cond: (context: { intentResult: string; }) => \"add_todo_item\" == context.intentResult,\n                    actions: (context:SDSContext) => console.log('<< TODO: ' + context.intentResult),\n                    target: 'todo',\n                },\n                {\n                    cond: (context: { intentResult: string; }) => \"make_appointment\" == context.intentResult,\n                    actions: (context:SDSContext) => console.log('<< APP: ' + context.intentResult),\n                    target: 'makeAppointment',\n                },\n                {\n                    cond: (context: { intentResult: string; }) => \"set_timer\" == context.intentResult,\n                    actions: (context:SDSContext) => console.log('<< TIMER: ' + context.intentResult),\n                    target: 'timer',\n                }]\n            },\n        },\n        makeAppointment:{\n            initial: 'who',\n            on: {\n                RECOGNISED: {\n                    target: 'stop',\n                    cond: (context)=> context.recResult ==='stop'\n                },\n                MAXSPEECH: [\n                    {\n                        cond: (context, event) => context.counter < 3,\n                        target: 'maxspeech',\n                    },\n                    {\n                        cond: (context, event) => context.counter > 2,\n                        target: \"#root.dm.init\",\n                    }\n                ]\n            },\n            states: {\n                hist: {type: 'history', history: 'deep'},\n                who: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            {\n                                cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                                target: \"day\",\n                                actions: [\n                                    assign((context) => { return { person: grammar[context.recResult].person } })\n                                ],\n                            },\n                            {\n                                target: '.help',\n                                cond: (context)=>context.recResult === 'help'\n                            },\n                            { \n                                cond: (context)=> context.recResult !== 'stop',\n                                target: \".nomatch\",\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt: {\n                            ...promptAndAsk(\n                                \"Who are you meeting with?\",\n                                \"Say the name of the person you want to meet.\",\n                                \"With who is your meeting?\",\n                                \"Please. Tell me who you want to meet with.\"\n                            )\n                        },\n                        help: {\n                            ...getHelp(\"Say the name of the person in your contacts list that you want to schedule a meeting with.\")\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I don't know them\"),\n                            on: { ENDSPEECH: \"prompt\" },\n                        }\n                    }\n                },\n                day: {\n                    initial: \"begin\",\n                    on: { \n                        RECOGNISED: [{\n                            cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                            actions: [cancel('maxsp'), assign((context) => { return { day: grammar[context.recResult].day } })],\n                            target: \"allday\"\n\n                        },\n                        {\n                            target: '.help',\n                            cond: (context)=>context.recResult === 'help'\n                        },\n                        {   cond: (context)=> context.recResult !== 'stop',\n                            target: \".nomatch\" }]\n                    },\n                    states: {\n                        begin: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK. ${context.person}.`\n                            })),\n                            on: { ENDSPEECH: \"prompt\" }\n                        },\n                        prompt: {    \n                            ...promptAndAsk(\n                                \"On which day is your meeting?\", \n                                \"Which day is your meeting on?\",\n                                \"There are 7 days. Pick one.\",\n                                \"Just pick a bloody day. Please.\",\n                            )\n                        },\n                        help: {    \n                            ...getHelp(\"Pick a day of the week for your meeting\")\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that\"),\n                            on: { ENDSPEECH: \"prompt\" }\n                        },\n                    }\n                },\n                allday: {\n                    initial: \"begin\",\n                    on: { \n                        RECOGNISED: [{\n                            cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                            actions: [cancel('maxsp'), assign((context) => { return { confirm: boolgrammar[context.recResult].yes } })],\n                            target: \"confirmallday\",\n\n                        },\n                        {\n                            cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                            actions: [cancel('maxsp'), assign((context) => { return { confirm: boolgrammar[context.recResult].no } })],\n                            target: \"time\",\n                        },\n                        {\n                            target: '.help',\n                            cond: (context)=>context.recResult === 'help'\n                        },\n                        {   cond: (context)=> context.recResult !== 'stop',\n                            target: \".nomatch\" }]\n                    },\n                    states: {\n                        begin: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK. ${context.day}.`\n                            })),\n                            on: { ENDSPEECH: \"prompt\" }\n                        },\n                        help: {\n                            ...getHelp(\"Answer with yes or no.\")\n                        },\n                        prompt: {\n                            ...promptAndAsk(\n                                \"Is your meeting all day?\",\n                                \"Well. Is it?\",\n                                \"Will it take all day?\",\n                                \"You are tearing me apart, Lisa!\",\n                            )\n                        },\n                        ask: {\n                            entry: listen()\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that\"),\n                            on: { ENDSPEECH: \"prompt\" }\n                        },\n                    }\n                },\n                confirmallday: {\n                    initial: \"prompt\",\n                    on: { \n                        RECOGNISED: [{\n                            cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                            actions: [cancel('maxsp'), assign((context) => { return { confirm: boolgrammar[context.recResult].yes } })],\n                            target: \"meetingbooked\",\n\n                        },\n                        {\n                            cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                            actions: [cancel('maxsp'), assign((context) => { return { confirm: boolgrammar[context.recResult].no } })],\n                            target: \"who\",\n                        },\n                        {\n                            cond: (context) => \"cancel\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { cancel: grammar[context.recResult].cancel } }),\n                            target: \"#root.dm.init\"\n                        },\n                        {\n                            target: '.help',\n                            cond: (context)=>context.recResult === 'help'\n                        },\n                        {   cond: (context)=> context.recResult !== 'stop',\n                            target: \".nomatch\" }]\n                    },\n                \n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" },\n                        },\n                        help:{\n                            ...getHelp(\"Say either yes or no\")\n                        },\n                        ask: {\n                            entry: [listen(), \n                            send('MAXSPEECH', { delay: 5000,\n                                                id: 'maxsp' } )]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that\"),\n                            on: { ENDSPEECH: \"prompt\" }\n                        },\n                    }\n                },\n                time: {\n                    initial: \"begin\",\n                    on: { \n                        RECOGNISED: [{\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: [cancel('maxsp'), assign((context) => { return { time: grammar[context.recResult].time } })],\n                            target: \"confirmtime\"\n\n                        },\n                        {\n                            target: '.help',\n                            cond: (context)=>context.recResult === 'help'\n                        },\n                        {   cond: (context)=> context.recResult !== 'stop',\n                            target: \".nomatch\" }]\n                    },\n                    states: {\n                        begin:{\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK.`\n                            })),\n                            on: { ENDSPEECH: \"prompt\" }\n                        },\n                        prompt: {\n                            ...promptAndAsk(\n                                \"At what time is your meeting?\",\n                                \"When is the meeting?\",\n                                \"What time is the meeting?\",\n                                \"It's like you don't even want to talk to me anymore.\",\n                            )\n                        },\n                        help: {\n                            ...getHelp(\n                                \"Say a time of day, to the closest hour\",\n                            )\n                        },\n                        ask: {\n                            entry: listen()\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that\"),\n                            on: { ENDSPEECH: \"prompt\" }\n                        },\n                    }\n                },\n                confirmtime: {\n                    initial: \"prompt\",\n                    on: { \n                        RECOGNISED: [\n                            {\n                                cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                                actions: [cancel('maxsp'), assign((context) => { return { confirm: boolgrammar[context.recResult].yes } })],\n                                target: \"meetingbooked\",\n                            },\n                            {\n                                cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                                actions: [cancel('maxsp'), assign((context) => { return { confirm: boolgrammar[context.recResult].no } })],\n                                target: \"who\",\n                            },\n                            {\n                                cond: (context)=>context.recResult === 'help',\n                                target: '.help',\n                            },\n                            {   cond: (context)=> context.recResult !== 'stop',\n                                target: \".nomatch\",\n                            }\n                        ]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        help:{\n                            ...getHelp(\"Say either yes or no\")\n                        },\n                        ask: {\n                            entry: [listen(), send('MAXSPEECH', {delay: 5000,\n                                                                id: 'maxsp'} )]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that\"),\n                            on: { ENDSPEECH: \"prompt\" }\n                        },\n                    }\n                },\n                meetingbooked: {\n                    initial: \"prompt\",\n                    on: { \n                        ENDSPEECH: \"#root.dm.init\" ,\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Your appointment has been created!`\n                            })),\n                        },\n                    }\n                },\n            }\n            },\n        stop: {\n            entry: say(\"Okay, stopping now.\"),\n            always: \"init\",\n        },\n        todo: {\n            initial: 'prompt',\n            states: {\n                prompt: { entry: say(\"Okay, let's create a new to do item.\")}\n            },\n            on: { ENDSPEECH: \"init\" }\n        },\n        timer: {\n            initial: 'prompt',\n            states: {\n                prompt: { entry: say(\"Okay, let's set a timer.\")}\n            },\n            on: { ENDSPEECH: \"init\" }\n        },\n        maxspeech: {\n            entry: say(\"You have to say something.\"),\n            on: { 'ENDSPEECH': 'makeAppointment.hist'}\n        },\n    },\n})\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-heroku.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        // headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, State } from \"xstate\";\nimport { MachineConfig, Action, actions} from \"xstate\";\nconst {send, cancel} = actions\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n// import { dmMachine } from \"./dmAppointment-old\";\nimport { dmMenu } from \"./lab4_dmAppointments\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\n// function say(text: string): Action<SDSContext, SDSEvent> {\n//     return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n// }\n\nlet count = 0\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMenu\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {\n                            target: 'idle',\n                            actions: [\n                                assign((context)=>{\n                                    return {counter: context.counter = 0}\n                                } ),\n                                cancel('maxsp'),\n                            ]\n                            },\n                        MAXSPEECH: {\n                            target: 'idle',\n                            actions: assign((context)=>{\n                                if (context.counter) {\n                                    return {counter: context.counter + 1}\n                                } else {\n                                    return {counter: count + 1}\n                                }\n                            \n                            })\n                    },\n                    },\n                    states: {\n                        progress: {\n                        },\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-heroku.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);"],"sourceRoot":""}